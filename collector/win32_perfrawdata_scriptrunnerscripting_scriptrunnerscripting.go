package collector

// Some changes had to be made to the file generated by the collector-generator,
// see: https://github.com/prometheus-community/windows_exporter/issues/774#issuecomment-830493896

import (
	"github.com/StackExchange/wmi"
//	"github.com/prometheus-community/windows_exporter/log"
	"github.com/prometheus/client_golang/prometheus"
)

func init() {
	registerCollector("win32_perfrawdata_scriptrunnerscripting_scriptrunnerscripting", newWin32_PerfRawData_ScriptRunnerScripting_ScriptRunnerScriptingCollector) // TODO: Add any perflib dependencies here
}

// A Win32_PerfRawData_ScriptRunnerScripting_ScriptRunnerScriptingCollector is a Prometheus collector for WMI Win32_PerfRawData_ScriptRunnerScripting_ScriptRunnerScripting metrics
type Win32_PerfRawData_ScriptRunnerScripting_ScriptRunnerScriptingCollector struct {
	ADqueriesexecuted               *prometheus.Desc
	ADqueriesinteractivePercent     *prometheus.Desc
	ADqueryerrors                   *prometheus.Desc
	ADqueryinprogress               *prometheus.Desc
	Azurequeriesexecuted            *prometheus.Desc
	AzurequeriesinteractivePercent  *prometheus.Desc
	Azurequeryerrors                *prometheus.Desc
	Azurequeryinprogress            *prometheus.Desc
	NumberExecutedinteractively     *prometheus.Desc
	NumberExecutedscheduled         *prometheus.Desc
	NumberExecutedstaged            *prometheus.Desc
	NumberExecutedtotal             *prometheus.Desc
	NumberExecutedviaConnector      *prometheus.Desc
	NumberExecutioncancelled        *prometheus.Desc
	PercentExecuteddelegated        *prometheus.Desc
	ScheduleChangesPersec           *prometheus.Desc
	ScheduledActions                *prometheus.Desc
	Schedulednext5Minutes           *prometheus.Desc
	Schedulednextsec                *prometheus.Desc
	ScriptingHostsActive            *prometheus.Desc
	ScriptingHostsActivePercent     *prometheus.Desc
	ScriptingHostsTotal             *prometheus.Desc
	ScriptJobsQueued                *prometheus.Desc
	Scriptqueriesexecuted           *prometheus.Desc
	ScriptqueriesinteractivePercent *prometheus.Desc
	Scriptqueryerrors               *prometheus.Desc
	Scriptqueryinprogress           *prometheus.Desc
	Scriptsbulkevent                *prometheus.Desc
	Scriptschanged                  *prometheus.Desc
	Scriptsreloadactive             *prometheus.Desc
	Scriptsreloads                  *prometheus.Desc
	Scriptsreloadtimeavgms          *prometheus.Desc
	Scriptsreloadtimemaxms          *prometheus.Desc
	Scriptsreloadtriggered          *prometheus.Desc
}

func newWin32_PerfRawData_ScriptRunnerScripting_ScriptRunnerScriptingCollector() (Collector, error) {
	const subsystem = "win32_perfrawdata_scriptrunnerscripting_scriptrunnerscripting"
	return &Win32_PerfRawData_ScriptRunnerScripting_ScriptRunnerScriptingCollector{
		ADqueriesexecuted: prometheus.NewDesc(
			prometheus.BuildFQName(Namespace, subsystem, "a_dqueriesexecuted"),
			"(ADqueriesexecuted)",
			nil,
			nil,
		),
		ADqueriesinteractivePercent: prometheus.NewDesc(
			prometheus.BuildFQName(Namespace, subsystem, "a_dqueriesinteractive_percent"),
			"(ADqueriesinteractivePercent)",
			nil,
			nil,
		),
		ADqueryerrors: prometheus.NewDesc(
			prometheus.BuildFQName(Namespace, subsystem, "a_dqueryerrors"),
			"(ADqueryerrors)",
			nil,
			nil,
		),
		ADqueryinprogress: prometheus.NewDesc(
			prometheus.BuildFQName(Namespace, subsystem, "a_dqueryinprogress"),
			"(ADqueryinprogress)",
			nil,
			nil,
		),
		Azurequeriesexecuted: prometheus.NewDesc(
			prometheus.BuildFQName(Namespace, subsystem, "azurequeriesexecuted"),
			"(Azurequeriesexecuted)",
			nil,
			nil,
		),
		AzurequeriesinteractivePercent: prometheus.NewDesc(
			prometheus.BuildFQName(Namespace, subsystem, "azurequeriesinteractive_percent"),
			"(AzurequeriesinteractivePercent)",
			nil,
			nil,
		),
		Azurequeryerrors: prometheus.NewDesc(
			prometheus.BuildFQName(Namespace, subsystem, "azurequeryerrors"),
			"(Azurequeryerrors)",
			nil,
			nil,
		),
		Azurequeryinprogress: prometheus.NewDesc(
			prometheus.BuildFQName(Namespace, subsystem, "azurequeryinprogress"),
			"(Azurequeryinprogress)",
			nil,
			nil,
		),
		NumberExecutedinteractively: prometheus.NewDesc(
			prometheus.BuildFQName(Namespace, subsystem, "number_executedinteractively"),
			"(NumberExecutedinteractively)",
			nil,
			nil,
		),
		NumberExecutedscheduled: prometheus.NewDesc(
			prometheus.BuildFQName(Namespace, subsystem, "number_executedscheduled"),
			"(NumberExecutedscheduled)",
			nil,
			nil,
		),
		NumberExecutedstaged: prometheus.NewDesc(
			prometheus.BuildFQName(Namespace, subsystem, "number_executedstaged"),
			"(NumberExecutedstaged)",
			nil,
			nil,
		),
		NumberExecutedtotal: prometheus.NewDesc(
			prometheus.BuildFQName(Namespace, subsystem, "number_executedtotal"),
			"(NumberExecutedtotal)",
			nil,
			nil,
		),
		NumberExecutedviaConnector: prometheus.NewDesc(
			prometheus.BuildFQName(Namespace, subsystem, "number_executedvia_connector"),
			"(NumberExecutedviaConnector)",
			nil,
			nil,
		),
		NumberExecutioncancelled: prometheus.NewDesc(
			prometheus.BuildFQName(Namespace, subsystem, "number_executioncancelled"),
			"(NumberExecutioncancelled)",
			nil,
			nil,
		),
		PercentExecuteddelegated: prometheus.NewDesc(
			prometheus.BuildFQName(Namespace, subsystem, "percent_executeddelegated"),
			"(PercentExecuteddelegated)",
			nil,
			nil,
		),
		ScheduleChangesPersec: prometheus.NewDesc(
			prometheus.BuildFQName(Namespace, subsystem, "schedule_changes_persec"),
			"(ScheduleChangesPersec)",
			nil,
			nil,
		),
		ScheduledActions: prometheus.NewDesc(
			prometheus.BuildFQName(Namespace, subsystem, "scheduled_actions"),
			"(ScheduledActions)",
			nil,
			nil,
		),
		Schedulednext5Minutes: prometheus.NewDesc(
			prometheus.BuildFQName(Namespace, subsystem, "schedulednext5_minutes"),
			"(Schedulednext5Minutes)",
			nil,
			nil,
		),
		Schedulednextsec: prometheus.NewDesc(
			prometheus.BuildFQName(Namespace, subsystem, "schedulednextsec"),
			"(Schedulednextsec)",
			nil,
			nil,
		),
		ScriptingHostsActive: prometheus.NewDesc(
			prometheus.BuildFQName(Namespace, subsystem, "scripting_hosts_active"),
			"(ScriptingHostsActive)",
			nil,
			nil,
		),
		ScriptingHostsActivePercent: prometheus.NewDesc(
			prometheus.BuildFQName(Namespace, subsystem, "scripting_hosts_active_percent"),
			"(ScriptingHostsActivePercent)",
			nil,
			nil,
		),
		ScriptingHostsTotal: prometheus.NewDesc(
			prometheus.BuildFQName(Namespace, subsystem, "scripting_hosts_total"),
			"(ScriptingHostsTotal)",
			nil,
			nil,
		),
		ScriptJobsQueued: prometheus.NewDesc(
			prometheus.BuildFQName(Namespace, subsystem, "script_jobs_queued"),
			"(ScriptJobsQueued)",
			nil,
			nil,
		),
		Scriptqueriesexecuted: prometheus.NewDesc(
			prometheus.BuildFQName(Namespace, subsystem, "scriptqueriesexecuted"),
			"(Scriptqueriesexecuted)",
			nil,
			nil,
		),
		ScriptqueriesinteractivePercent: prometheus.NewDesc(
			prometheus.BuildFQName(Namespace, subsystem, "scriptqueriesinteractive_percent"),
			"(ScriptqueriesinteractivePercent)",
			nil,
			nil,
		),
		Scriptqueryerrors: prometheus.NewDesc(
			prometheus.BuildFQName(Namespace, subsystem, "scriptqueryerrors"),
			"(Scriptqueryerrors)",
			nil,
			nil,
		),
		Scriptqueryinprogress: prometheus.NewDesc(
			prometheus.BuildFQName(Namespace, subsystem, "scriptqueryinprogress"),
			"(Scriptqueryinprogress)",
			nil,
			nil,
		),
		Scriptsbulkevent: prometheus.NewDesc(
			prometheus.BuildFQName(Namespace, subsystem, "scriptsbulkevent"),
			"(Scriptsbulkevent)",
			nil,
			nil,
		),
		Scriptschanged: prometheus.NewDesc(
			prometheus.BuildFQName(Namespace, subsystem, "scriptschanged"),
			"(Scriptschanged)",
			nil,
			nil,
		),
		Scriptsreloadactive: prometheus.NewDesc(
			prometheus.BuildFQName(Namespace, subsystem, "scriptsreloadactive"),
			"(Scriptsreloadactive)",
			nil,
			nil,
		),
		Scriptsreloads: prometheus.NewDesc(
			prometheus.BuildFQName(Namespace, subsystem, "scriptsreloads"),
			"(Scriptsreloads)",
			nil,
			nil,
		),
		Scriptsreloadtimeavgms: prometheus.NewDesc(
			prometheus.BuildFQName(Namespace, subsystem, "scriptsreloadtimeavgms"),
			"(Scriptsreloadtimeavgms)",
			nil,
			nil,
		),
		Scriptsreloadtimemaxms: prometheus.NewDesc(
			prometheus.BuildFQName(Namespace, subsystem, "scriptsreloadtimemaxms"),
			"(Scriptsreloadtimemaxms)",
			nil,
			nil,
		),
		Scriptsreloadtriggered: prometheus.NewDesc(
			prometheus.BuildFQName(Namespace, subsystem, "scriptsreloadtriggered"),
			"(Scriptsreloadtriggered)",
			nil,
			nil,
		),
	}, nil
}

// Win32_PerfRawData_ScriptRunnerScripting_ScriptRunnerScripting docs:
// - <add link to documentation here>
type Win32_PerfRawData_ScriptRunnerScripting_ScriptRunnerScripting struct {
	Name string

	ADqueriesexecuted               uint
	ADqueriesinteractivePercent     uint
	ADqueryerrors                   uint
	ADqueryinprogress               uint
	Azurequeriesexecuted            uint
	AzurequeriesinteractivePercent  uint
	Azurequeryerrors                uint
	Azurequeryinprogress            uint
	NumberExecutedinteractively     uint
	NumberExecutedscheduled         uint
	NumberExecutedstaged            uint
	NumberExecutedtotal             uint
	NumberExecutedviaConnector      uint
	NumberExecutioncancelled        uint
	PercentExecuteddelegated        uint
	ScheduleChangesPersec           uint
	ScheduledActions                uint
	Schedulednext5Minutes           uint
	Schedulednextsec                uint
	ScriptingHostsActive            uint
	ScriptingHostsActivePercent     uint
	ScriptingHostsTotal             uint
	ScriptJobsQueued                uint
	Scriptqueriesexecuted           uint
	ScriptqueriesinteractivePercent uint
	Scriptqueryerrors               uint
	Scriptqueryinprogress           uint
	Scriptsbulkevent                uint
	Scriptschanged                  uint
	Scriptsreloadactive             uint
	Scriptsreloads                  uint
	Scriptsreloadtimeavgms          uint
	Scriptsreloadtimemaxms          uint
	Scriptsreloadtriggered          uint
}

// Collect sends the metric values for each metric
// to the provided prometheus Metric channel.
func (c *Win32_PerfRawData_ScriptRunnerScripting_ScriptRunnerScriptingCollector) Collect(ctx *ScrapeContext, ch chan<- prometheus.Metric) error {
	var dst []Win32_PerfRawData_ScriptRunnerScripting_ScriptRunnerScripting
	q := queryAll(&dst)
	if err := wmi.Query(q, &dst); err != nil {
		return err
	}

	ch <- prometheus.MustNewConstMetric(
		c.ADqueriesexecuted,
		prometheus.GaugeValue,
		float64(dst[0].ADqueriesexecuted),
	)

	ch <- prometheus.MustNewConstMetric(
		c.ADqueriesinteractivePercent,
		prometheus.GaugeValue,
		float64(dst[0].ADqueriesinteractivePercent),
	)

	ch <- prometheus.MustNewConstMetric(
		c.ADqueryerrors,
		prometheus.GaugeValue,
		float64(dst[0].ADqueryerrors),
	)

	ch <- prometheus.MustNewConstMetric(
		c.ADqueryinprogress,
		prometheus.GaugeValue,
		float64(dst[0].ADqueryinprogress),
	)

	ch <- prometheus.MustNewConstMetric(
		c.Azurequeriesexecuted,
		prometheus.GaugeValue,
		float64(dst[0].Azurequeriesexecuted),
	)

	ch <- prometheus.MustNewConstMetric(
		c.AzurequeriesinteractivePercent,
		prometheus.GaugeValue,
		float64(dst[0].AzurequeriesinteractivePercent),
	)

	ch <- prometheus.MustNewConstMetric(
		c.Azurequeryerrors,
		prometheus.GaugeValue,
		float64(dst[0].Azurequeryerrors),
	)

	ch <- prometheus.MustNewConstMetric(
		c.Azurequeryinprogress,
		prometheus.GaugeValue,
		float64(dst[0].Azurequeryinprogress),
	)

	ch <- prometheus.MustNewConstMetric(
		c.NumberExecutedinteractively,
		prometheus.GaugeValue,
		float64(dst[0].NumberExecutedinteractively),
	)

	ch <- prometheus.MustNewConstMetric(
		c.NumberExecutedscheduled,
		prometheus.GaugeValue,
		float64(dst[0].NumberExecutedscheduled),
	)

	ch <- prometheus.MustNewConstMetric(
		c.NumberExecutedstaged,
		prometheus.GaugeValue,
		float64(dst[0].NumberExecutedstaged),
	)

	ch <- prometheus.MustNewConstMetric(
		c.NumberExecutedtotal,
		prometheus.GaugeValue,
		float64(dst[0].NumberExecutedtotal),
	)

	ch <- prometheus.MustNewConstMetric(
		c.NumberExecutedviaConnector,
		prometheus.GaugeValue,
		float64(dst[0].NumberExecutedviaConnector),
	)

	ch <- prometheus.MustNewConstMetric(
		c.NumberExecutioncancelled,
		prometheus.GaugeValue,
		float64(dst[0].NumberExecutioncancelled),
	)

	ch <- prometheus.MustNewConstMetric(
		c.PercentExecuteddelegated,
		prometheus.GaugeValue,
		float64(dst[0].PercentExecuteddelegated),
	)

	ch <- prometheus.MustNewConstMetric(
		c.ScheduleChangesPersec,
		prometheus.GaugeValue,
		float64(dst[0].ScheduleChangesPersec),
	)

	ch <- prometheus.MustNewConstMetric(
		c.ScheduledActions,
		prometheus.GaugeValue,
		float64(dst[0].ScheduledActions),
	)

	ch <- prometheus.MustNewConstMetric(
		c.Schedulednext5Minutes,
		prometheus.GaugeValue,
		float64(dst[0].Schedulednext5Minutes),
	)

	ch <- prometheus.MustNewConstMetric(
		c.Schedulednextsec,
		prometheus.GaugeValue,
		float64(dst[0].Schedulednextsec),
	)

	ch <- prometheus.MustNewConstMetric(
		c.ScriptingHostsActive,
		prometheus.GaugeValue,
		float64(dst[0].ScriptingHostsActive),
	)

	ch <- prometheus.MustNewConstMetric(
		c.ScriptingHostsActivePercent,
		prometheus.GaugeValue,
		float64(dst[0].ScriptingHostsActivePercent),
	)

	ch <- prometheus.MustNewConstMetric(
		c.ScriptingHostsTotal,
		prometheus.GaugeValue,
		float64(dst[0].ScriptingHostsTotal),
	)

	ch <- prometheus.MustNewConstMetric(
		c.ScriptJobsQueued,
		prometheus.GaugeValue,
		float64(dst[0].ScriptJobsQueued),
	)

	ch <- prometheus.MustNewConstMetric(
		c.Scriptqueriesexecuted,
		prometheus.GaugeValue,
		float64(dst[0].Scriptqueriesexecuted),
	)

	ch <- prometheus.MustNewConstMetric(
		c.ScriptqueriesinteractivePercent,
		prometheus.GaugeValue,
		float64(dst[0].ScriptqueriesinteractivePercent),
	)

	ch <- prometheus.MustNewConstMetric(
		c.Scriptqueryerrors,
		prometheus.GaugeValue,
		float64(dst[0].Scriptqueryerrors),
	)

	ch <- prometheus.MustNewConstMetric(
		c.Scriptqueryinprogress,
		prometheus.GaugeValue,
		float64(dst[0].Scriptqueryinprogress),
	)

	ch <- prometheus.MustNewConstMetric(
		c.Scriptsbulkevent,
		prometheus.GaugeValue,
		float64(dst[0].Scriptsbulkevent),
	)

	ch <- prometheus.MustNewConstMetric(
		c.Scriptschanged,
		prometheus.GaugeValue,
		float64(dst[0].Scriptschanged),
	)

	ch <- prometheus.MustNewConstMetric(
		c.Scriptsreloadactive,
		prometheus.GaugeValue,
		float64(dst[0].Scriptsreloadactive),
	)

	ch <- prometheus.MustNewConstMetric(
		c.Scriptsreloads,
		prometheus.GaugeValue,
		float64(dst[0].Scriptsreloads),
	)

	ch <- prometheus.MustNewConstMetric(
		c.Scriptsreloadtimeavgms,
		prometheus.GaugeValue,
		float64(dst[0].Scriptsreloadtimeavgms),
	)

	ch <- prometheus.MustNewConstMetric(
		c.Scriptsreloadtimemaxms,
		prometheus.GaugeValue,
		float64(dst[0].Scriptsreloadtimemaxms),
	)

	ch <- prometheus.MustNewConstMetric(
		c.Scriptsreloadtriggered,
		prometheus.GaugeValue,
		float64(dst[0].Scriptsreloadtriggered),
	)

	return nil
}
